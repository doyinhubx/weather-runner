name: Simulate Good → Bad → Good Deployment with ArgoCD

on:
  push:
    branches: [main]

jobs:
  deploy-simulation:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout Repo
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Install Kind (Kubernetes in Docker)
      - name: Install Kind
        uses: engineerd/setup-kind@v0.13.0
        with:
          version: v0.23.0

      # 4. Create Kind cluster
      - name: Create Kind Cluster
        run: |
          kind create cluster --name weather-cluster
          kubectl cluster-info --context kind-weather-cluster

      # 5. Install ArgoCD in Kind cluster
      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl wait --for=condition=available --timeout=120s deployment/argocd-server -n argocd

      # 6. Build & Load Docker Images into Kind
      - name: Build Good Image
        run: |
          docker build -t weather-app:good -f Dockerfile.good .
          kind load docker-image weather-app:good --name weather-cluster

      - name: Build Bad Image
        run: |
          docker build -t weather-app:bad -f Dockerfile.bad .
          kind load docker-image weather-app:bad --name weather-cluster

      # 7. First deployment (Good Image) via Helm + ArgoCD
      - name: Deploy Good Image
        run: |
          helm upgrade --install weather-app weather-app-helms \
            --namespace helms --create-namespace \
            --set image.tag=good
          kubectl apply -f k8s/argocd-apps/weather-app-helm.yaml
          sleep 30
          kubectl get pods -n helms

      # 8. Second deployment (Bad Image)
      - name: Deploy Bad Image
        run: |
          helm upgrade weather-app weather-app-helms \
            --namespace helms \
            --set image.tag=bad
          sleep 30
          kubectl get pods -n helms

      # 9. Third deployment (Good Image again)
      - name: Deploy Good Image Again
        run: |
          helm upgrade weather-app weather-app-helms \
            --namespace helms \
            --set image.tag=good
          sleep 30
          kubectl get pods -n helms

      # 10. Verification: Check ArgoCD reconciled back to Good Image
      - name: Verify ArgoCD Reconciliation
        run: |
          FINAL_IMAGE=$(kubectl get deployment weather-app -n helms -o jsonpath="{.spec.template.spec.containers[0].image}")
          echo "Final deployed image: $FINAL_IMAGE"
          if [[ "$FINAL_IMAGE" == *":good" ]]; then
            echo "✅ ArgoCD successfully reconciled back to good image!"
          else
            echo "❌ ArgoCD did not reconcile correctly!"
            exit 1
          fi

name: Weather App Rollout Simulation

on:
  push:
    branches:
      - main

jobs:
  rollout-simulation:
    runs-on: ubuntu-latest

    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig

    steps:
      # 1. Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      # 3. Build Docker image
      - name: Build weather-app Docker image
        run: |
          docker build -t weather-app:local .

      # 4. Install Kind
      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.26.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      # 5. Create Kind cluster
      - name: Create Kind cluster
        run: |
          kind create cluster --name rollout-sim --kubeconfig $KUBECONFIG

      # 6. Load Docker image into Kind cluster
      - name: Load Docker image into Kind
        run: |
          kind load docker-image weather-app:local --name rollout-sim

      # 7. Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # 8. Install Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # 9. Install ArgoCD
      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl wait --for=condition=available --timeout=180s deployment/argocd-server -n argocd

      # 10. Create app namespace
      - name: Create app namespace
        run: |
          kubectl create namespace app || true

      # # 11. Blue-Green Deployment: Deploy v1 (Blue)
      # - name: Deploy v1 (Blue) with debugging
      #   run: |
      #     echo "Deploying Blue version (v1)..."
      #     kubectl apply -n app -f k8s/blue-v1.yaml
          
      #     # Wait with timeout and get debug info if it fails
      #     timeout 60s kubectl rollout status deployment/weather-blue -n app || \
      #     (echo "Rollout failed - getting debug info:" && \
      #      kubectl describe deployment/weather-blue -n app && \
      #      kubectl get pods -n app -l version=blue && \
      #      kubectl logs -n app -l version=blue --all-containers=true --tail=50 && \
      #      exit 1)

      # 11. Blue-Green Deployment: Deploy v1 (Blue)
      - name: Deploy v1 (Blue) with detailed debugging
        run: |
          echo "Deploying Blue version (v1)..."
          kubectl apply -n app -f k8s/blue-v1.yaml
          
          # Wait a bit for pods to start
          sleep 10
          
          # Get detailed debug information
          echo "=== Pod Status ==="
          kubectl get pods -n app -o wide
          
          echo "=== Pod Details ==="
          kubectl describe pods -n app -l version=blue
          
          echo "=== Deployment Status ==="
          kubectl describe deployment/weather-blue -n app
          
          echo "=== Readiness Probe Debug ==="
          for pod in $(kubectl get pods -n app -l version=blue -o name); do
            echo "--- Debugging $pod ---"
            kubectl exec -n app $pod -- curl -s http://localhost:8080/ || echo "Cannot connect to app"
            kubectl exec -n app $pod -- netstat -tln || echo "Netstat not available"
            kubectl exec -n app $pod -- ps aux || echo "PS not available"
          done
          
          # Now try to check rollout status
          timeout 30s kubectl rollout status deployment/weather-blue -n app || \
          (echo "Rollout failed - check above debug info" && exit 1)

      # 12. Blue-Green Deployment: Deploy v2 (Green)
      - name: Deploy v2 (Green) and switch service
        run: |
          echo "Deploying Green version (v2)..."
          kubectl apply -n app -f k8s/green-v2.yaml
          kubectl rollout status deployment/weather-green -n app
          echo "Switching Service to Green..."
          kubectl apply -n app -f k8s/switch-to-green.yaml
          kubectl get svc -n app weather-app
          kubectl get pods -n app -l version=green -o wide

      # 13. Canary rollout simulation
      - name: Canary rollout
        run: |
          echo "Starting Canary rollout..."
          kubectl apply -n app -f k8s/canary-v2-10.yaml
          kubectl rollout status deployment/weather-canary -n app --timeout=30s
          kubectl get pods -n app -o wide
          
          echo "Scaling to 50%..."
          kubectl patch deployment weather-canary -n app -p '{"spec":{"replicas":2}}'
          sleep 20
          kubectl get pods -n app -o wide
          
          echo "Scaling to 100%..."
          kubectl patch deployment weather-canary -n app -p '{"spec":{"replicas":4}}'
          sleep 20
          kubectl get pods -n app -o wide



      # 14. Display rollout status
      - name: Show rollout status
        run: |
          echo "===== Deployment Status ====="
          kubectl get deployments -n app -o wide
          kubectl get pods -n app -o wide
          kubectl get svc -n app

      # 15. Rollback simulation
      - name: Rollback to Blue
        run: |
          echo "Rolling back to Blue (v1)..."
          kubectl apply -n app -f k8s/blue-v1.yaml
          kubectl apply -n app -f k8s/switch-to-blue.yaml
          kubectl rollout status deployment/weather-blue -n app
          kubectl get pods -n app -l version=blue -o wide
          kubectl get svc -n app

      # 16. Cleanup Kind cluster
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up Kind cluster..."
          kind delete cluster --name rollout-sim

name: Simulate Good → Bad → Good Deployment with ArgoCD + Image Updater

on:
  push:
    branches: [main]

jobs:
  deploy-simulation:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: 📥 Checkout Repo
        uses: actions/checkout@v4

      # 2. Setup Kind cluster
      - name: 🚀 Setup Kind Cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: weather-sim

      # 3. Install ArgoCD
      - name: ⚙️ Install ArgoCD
        run: |
          echo "===== Installing ArgoCD ====="
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          echo "✅ ArgoCD installed"

      # 4. Apply namespace for app
      - name: 📦 Create App Namespace
        run: |
          kubectl create namespace app || true

      # 5. Apply Service (shared across rollouts)
      - name: 🌐 Apply weather-app Service
        run: |
          kubectl apply -n app -f k8s/service.yaml
          echo "✅ Service applied"
      
      # 6. Deploy Blue (v1)
      - name: 🚀 Deploy Blue (Good Image)
        run: |
          docker build -t weather-app:good -f Dockerfile .
          kind load docker-image weather-app:good --name weather-sim
          kubectl apply -n app -f k8s/blue-v1.yaml

          echo "🔄 Waiting for Blue rollout..."
          if ! kubectl rollout status deployment/weather-blue -n app --timeout=60s; then
            echo "❌ Rollout failed! Dumping pod info & logs..."
            kubectl get pods -n app -l version=blue -o wide
            kubectl describe pods -n app -l version=blue
            for pod in $(kubectl get pods -n app -l version=blue -o jsonpath='{.items[*].metadata.name}'); do
              echo "===== Logs from $pod ====="
              kubectl logs "$pod" -n app || true
            done
            exit 1
          fi
          echo "✅ Blue deployment successful"
          echo "=================================================="

      
      # 7. Traffic test (Blue)
      - name: 🌍 Traffic test (Blue)
        run: |
          for i in {1..5}; do
            kubectl run curl-blue-$i --rm -i --restart=Never --image=curlimages/curl -n app -- \
              curl -s http://weather-app:8080
          done
          echo "✅ Blue serving traffic"

      # 8. Build Bad Image (simulate failure)
      - name: 🐳 Build Bad Dockerfile
        run: |
          echo "===== Building bad image ====="
          docker build -t weather-app:bad -f Dockerfile.bad .
          kind load docker-image weather-app:bad --name weather-sim
          echo "✅ Bad image built and loaded"

      # 9. Deploy Green with Bad Image (expected to fail)
      - name: 🟢 Deploy Green (Bad Image)
        id: green-deploy
        continue-on-error: true
        run: |
          echo "===== Deploying Green with bad image ====="
          kubectl apply -n app -f k8s/green-v2.yaml
          kubectl set image deployment/weather-green -n app weather-app=weather-app:bad
          echo "🔄 Waiting for Green rollout..."
          kubectl rollout status deployment/weather-green -n app --timeout=60s
          echo "⚠️ Rollout step finished (may have failed)"

      # 10. Rollback to Blue if rollout failed
      - name: 🔁 Rollback to Blue if Green rollout fails
        if: steps.green-deploy.outcome == 'failure'
        run: |
          echo "❌ Green rollout FAILED. Rolling back to Blue..."
          kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"blue"}}}'
          kubectl rollout status deployment/weather-blue -n app --timeout=60s
          echo "✅ Rollback complete (Blue active again)"


      # 11. Redeploy Green with Good Image (recover)
      - name: 🟢 Redeploy Green (Good Image)
        run: |
          echo "===== Redeploying Green with good image ====="
          docker build -t weather-app:good -f Dockerfile .
          kind load docker-image weather-app:good --name weather-sim
          kubectl set image deployment/weather-green -n app weather-app=weather-app:good
          kubectl rollout status deployment/weather-green -n app --timeout=60s
          echo "✅ Green redeployed successfully"


      # # 12. Canary rollout simulation
      # - name: 🟡 Canary rollout
      #   run: |
      #     echo "===== Starting Canary rollout ====="
      #     kubectl apply -n app -f k8s/canary-v2-10.yaml
      #     kubectl rollout status deployment/weather-canary -n app --timeout=60s
      #     kubectl get pods -n app -o wide

      #     echo "Scaling Canary to 50%..."
      #     kubectl patch deployment weather-canary -n app -p '{"spec":{"replicas":2}}'
      #     sleep 15
      #     kubectl get pods -n app -o wide

      #     echo "Scaling Canary to 100%..."
      #     kubectl patch deployment weather-canary -n app -p '{"spec":{"replicas":4}}'
      #     sleep 15
      #     kubectl get pods -n app -o wide
      #     echo "✅ Canary scaled to 100%"

      # # 13. Traffic test (Canary) with rollback safety
      # - name: 🌍 Traffic test (Canary)
      #   id: canary-test
      #   continue-on-error: true
      #   run: |
      #     echo "===== Testing Canary traffic ====="
      #     for i in {1..10}; do
      #       kubectl run curl-canary-$i --rm -i --restart=Never --image=curlimages/curl -n app -- \
      #         curl -s http://weather-app:8080 || exit 1
      #     done

      # - name: 🔁 Rollback to Blue if Canary fails
      #   if: steps.canary-test.outcome == 'failure'
      #   run: |
      #     echo "❌ Canary failed. Rolling back..."
      #     kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"blue"}}}'
      #     kubectl rollout status deployment/weather-blue -n app --timeout=60s
      #     exit 1


      # 12. Canary rollout simulation (start small)
      - name: 🟡 Canary rollout - 10%
        run: |
          echo "===== Starting Canary rollout at 10% ====="
          kubectl apply -n app -f k8s/canary-v2-10.yaml
          kubectl rollout status deployment/weather-canary -n app --timeout=60s
          kubectl get pods -n app -o wide

      # 13. Traffic test Canary (10%)
      - name: 🌍 Traffic test Canary (10%)
        id: canary-test-10
        continue-on-error: true
        run: |
          echo "===== Testing Canary traffic at 10% ====="
          for i in {1..5}; do
            kubectl run curl-canary10-$i --rm -i --restart=Never --image=curlimages/curl -n app -- \
              curl -s http://weather-app:8080 || exit 1
          done

      - name: 🔁 Rollback if Canary 10% fails
        if: steps.canary-test-10.outcome == 'failure'
        run: |
          echo "❌ Canary 10% failed. Rolling back to Blue..."
          kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"blue"}}}'
          kubectl rollout status deployment/weather-blue -n app --timeout=60s
          exit 1

      # 14. Scale Canary to 25%
      - name: 🟡 Scale Canary to 25%
        run: |
          echo "===== Scaling Canary to 25% ====="
          kubectl patch deployment weather-canary -n app -p '{"spec":{"replicas":1}}'
          sleep 15
          kubectl get pods -n app -o wide

      # 14.5. Traffic test Canary (25%)
      - name: 🌍 Traffic test Canary (25%)
        id: canary-test-25
        continue-on-error: true
        run: |
          echo "===== Testing Canary traffic at 25% ====="
          for i in {1..5}; do
            kubectl run curl-canary25-$i --rm -i --restart=Never --image=curlimages/curl -n app -- \
              curl -s http://weather-app:8080 || exit 1
          done

      - name: 🔁 Rollback if Canary 25% fails
        if: steps.canary-test-25.outcome == 'failure'
        run: |
          echo "❌ Canary 25% failed. Rolling back to Blue..."
          kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"blue"}}}'
          kubectl rollout status deployment/weather-blue -n app --timeout=60s
          exit 1

      # 15. Scale Canary to 50%
      - name: 🟡 Scale Canary to 50%
        run: |
          echo "===== Scaling Canary to 50% ====="
          kubectl patch deployment weather-canary -n app -p '{"spec":{"replicas":2}}'
          sleep 15
          kubectl get pods -n app -o wide

      # 15.5. Traffic test Canary (50%)
      - name: 🌍 Traffic test Canary (50%)
        id: canary-test-50
        continue-on-error: true
        run: |
          echo "===== Testing Canary traffic at 50% ====="
          for i in {1..5}; do
            kubectl run curl-canary50-$i --rm -i --restart=Never --image=curlimages/curl -n app -- \
              curl -s http://weather-app:8080 || exit 1
          done

      - name: 🔁 Rollback if Canary 50% fails
        if: steps.canary-test-50.outcome == 'failure'
        run: |
          echo "❌ Canary 50% failed. Rolling back to Blue..."
          kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"blue"}}}'
          kubectl rollout status deployment/weather-blue -n app --timeout=60s
          exit 1

      # 16. Scale Canary to 100%
      - name: 🟡 Scale Canary to 100%
        run: |
          echo "===== Scaling Canary to 100% ====="
          kubectl patch deployment weather-canary -n app -p '{"spec":{"replicas":4}}'
          sleep 15
          kubectl get pods -n app -o wide

      # 16.5. Traffic test Canary (100%)
      - name: 🌍 Traffic test Canary (100%)
        id: canary-test-100
        continue-on-error: true
        run: |
          echo "===== Testing Canary traffic at 100% ====="
          for i in {1..5}; do
            kubectl run curl-canary100-$i --rm -i --restart=Never --image=curlimages/curl -n app -- \
              curl -s http://weather-app:8080 || exit 1
          done

      - name: 🔁 Rollback if Canary 100% fails
        if: steps.canary-test-100.outcome == 'failure'
        run: |
          echo "❌ Canary 100% failed. Rolling back to Blue..."
          kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"blue"}}}'
          kubectl rollout status deployment/weather-blue -n app --timeout=60s
          exit 1

      # 17. Explicit rollback at end
      - name: 🔙 Rollback to Blue (final reset)
        run: |
          echo "===== Resetting Service to Blue ====="
          kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"blue"}}}'
          kubectl rollout status deployment/weather-blue -n app --timeout=60s
          echo "✅ Cluster reset to Blue"

      # 15. Final Cleanup
      - name: 🧹 Cleanup Kind Cluster
        if: always()
        run: |
          echo "===== Deleting Kind cluster ====="
          kind delete cluster --name weather-sim
          echo "✅ Cleanup complete"

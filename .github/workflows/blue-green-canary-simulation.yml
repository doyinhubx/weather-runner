name: Weather App Rollout Simulation

on:
  push:
    branches:
      - main

jobs:
  rollout-simulation:
    runs-on: ubuntu-latest

    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig

    steps:
      # 1. Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      # 3. Build Docker image
      - name: Build weather-app Docker image
        run: |
          docker build -t weather-app:local .

      # 4. Install Kind
      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.26.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      # 5. Create Kind cluster
      - name: Create Kind cluster
        run: |
          kind create cluster --name rollout-sim --kubeconfig $KUBECONFIG

      # 6. Load Docker image into Kind cluster
      - name: Load Docker image into Kind
        run: |
          kind load docker-image weather-app:local --name rollout-sim

      # 7. Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # 8. Install Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # 9. Install ArgoCD
      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl wait --for=condition=available --timeout=180s deployment/argocd-server -n argocd

      # 10. Create app namespace
      - name: Create app namespace
        run: |
          kubectl create namespace app || true

      # 11. Deploy v1 (Blue) with Service
      - name: Deploy v1 (Blue)
        run: |
          echo "Deploying Blue version (v1)..."
          kubectl apply -n app -f k8s/blue-v1.yaml
          kubectl rollout status deployment/weather-blue -n app --timeout=90s

          # Apply service once (default points to blue)
          kubectl apply -n app -f k8s/service.yaml

          echo "Blue deployment successful ✅"
          kubectl get pods -n app -l version=blue -o wide
          kubectl get svc -n app weather-app

      # 12. Deploy v2 (Green)
      - name: Deploy v2 (Green)
        run: |
          echo "Deploying Green version (v2)..."
          kubectl apply -n app -f k8s/green-v2.yaml
          kubectl rollout status deployment/weather-green -n app --timeout=90s
          echo "Green deployment ready ✅"

      # 13. Switch Service from Blue → Green
      - name: Switch Service to Green
        run: |
          echo "Switching Service selector from Blue → Green..."
          kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"green"}}}'
          sleep 5
          kubectl get svc -n app weather-app -o yaml

      # 14. Traffic test (Green active) with rollback logic
      - name: Traffic test (Green active)
        id: green-test
        continue-on-error: true
        run: |
          echo "Testing traffic after switching to Green..."
          for i in {1..5}; do
            kubectl run curl-green-$i --rm -i --restart=Never --image=curlimages/curl -n app -- \
              curl -s http://weather-app:8080 || exit 1
          done

      - name: Rollback to Blue if Green fails
        if: steps.green-test.outcome == 'failure'
        run: |
          echo "❌ Green failed. Rolling back to Blue..."
          kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"blue"}}}'
          kubectl rollout status deployment/weather-blue -n app --timeout=60s
          exit 1

      # 15. Canary rollout simulation
      - name: Canary rollout
        run: |
          echo "Starting Canary rollout..."
          kubectl apply -n app -f k8s/canary-v2-10.yaml
          kubectl rollout status deployment/weather-canary -n app --timeout=60s
          kubectl get pods -n app -o wide
          
          echo "Scaling Canary to 50%..."
          kubectl patch deployment weather-canary -n app -p '{"spec":{"replicas":2}}'
          sleep 20
          kubectl get pods -n app -o wide
          
          echo "Scaling Canary to 100%..."
          kubectl patch deployment weather-canary -n app -p '{"spec":{"replicas":4}}'
          sleep 20
          kubectl get pods -n app -o wide

      # 16. Traffic test (Canary rollout) with rollback logic
      - name: Traffic test (Canary rollout)
        id: canary-test
        continue-on-error: true
        run: |
          echo "Testing traffic during Canary rollout..."
          for i in {1..10}; do
            kubectl run curl-canary-$i --rm -i --restart=Never --image=curlimages/curl -n app -- \
              curl -s http://weather-app:8080 || exit 1
          done

      - name: Rollback to Blue if Canary fails
        if: steps.canary-test.outcome == 'failure'
        run: |
          echo "❌ Canary failed. Rolling back to Blue..."
          kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"blue"}}}'
          kubectl rollout status deployment/weather-blue -n app --timeout=60s
          exit 1

      # 17. Rollback to Blue (explicit at end of sim)
      - name: Rollback to Blue
        run: |
          echo "Rolling back Service selector to Blue..."
          kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"blue"}}}'
          kubectl rollout status deployment/weather-blue -n app --timeout=60s
          kubectl get pods -n app -l version=blue -o wide
          kubectl get svc -n app weather-app -o yaml

      # 18. Traffic test (Rollback to Blue)
      - name: Traffic test (Rollback to Blue)
        run: |
          echo "Testing traffic after rollback..."
          for i in {1..5}; do
            kubectl run curl-rollback-$i --rm -i --restart=Never --image=curlimages/curl -n app -- \
              curl -s http://weather-app:8080
          done

      # 19. Cleanup Kind cluster
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up Kind cluster..."
          kind delete cluster --name rollout-sim

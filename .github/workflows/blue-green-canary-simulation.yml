name: Simulate Good → Bad → Good Deployment with ArgoCD + Image Updater

on:
  push:
    branches: [main]

jobs:
  deploy-simulation:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: 📥 Checkout Repo
        uses: actions/checkout@v4

      # 2. Setup Kind cluster
      - name: 🚀 Setup Kind Cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: weather-sim

      # 3. Install ArgoCD
      - name: ⚙️ Install ArgoCD
        run: |
          echo "===== Installing ArgoCD ====="
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          echo "✅ ArgoCD installed"

      # 4. Apply namespace for app
      - name: 📦 Create App Namespace
        run: |
          kubectl create namespace app || true

      # 5. Apply Service (shared across rollouts)
      - name: 🌐 Apply weather-app Service
        run: |
          kubectl apply -n app -f k8s/service.yaml
          echo "✅ Service applied"
      
      # 6. Deploy Blue (v1)
      - name: 🚀 Deploy Blue (Good Image)
        run: |
          docker build -t weather-app:good -f Dockerfile .
          kind load docker-image weather-app:good --name weather-sim
          kubectl apply -n app -f k8s/blue-v1.yaml

          echo "🔄 Waiting for Blue rollout..."
          if ! kubectl rollout status deployment/weather-blue -n app --timeout=60s; then
            echo "❌ Rollout failed! Dumping pod info & logs..."
            kubectl get pods -n app -l version=blue -o wide
            kubectl describe pods -n app -l version=blue
            for pod in $(kubectl get pods -n app -l version=blue -o jsonpath='{.items[*].metadata.name}'); do
              echo "===== Logs from $pod ====="
              kubectl logs "$pod" -n app || true
            done
            exit 1
          fi
          echo "✅ Blue deployment successful"
          echo "=================================================="

      
      # 7. Traffic test (Blue)
      - name: 🌍 Traffic test (Blue)
        run: |
          for i in {1..5}; do
            kubectl run curl-blue-$i --rm -i --restart=Never --image=curlimages/curl -n app -- \
              curl -s http://weather-app:8080
          done
          echo "✅ Blue serving traffic"

      # 8. Simulate Good → Bad Build (Dockerfile.bad)
      - name: 🐳 Simulate Bad Build
        continue-on-error: true
        id: bad-build
        run: |
          echo "===== Building bad image ====="
          docker build -t weather-app:bad -f Dockerfile.bad .
          if [ $? -ne 0 ]; then
            echo "❌ Bad build failed as expected"
            exit 1
          fi

      # 9. Simulate Good Build (Dockerfile)
      - name: 🐳 Build Good Dockerfile
        run: |
          echo "===== Building good image ====="
          docker build -t weather-app:good -f Dockerfile .
          echo "✅ Good build succeeded"

      # 10. Deploy Green (v2)
      - name: 🟢 Deploy Green (v2)
        run: |
          kubectl apply -n app -f k8s/green-v2.yaml
          kubectl rollout status deployment/weather-green -n app --timeout=60s
          kubectl get pods -n app -l version=green
          echo "✅ Green deployed"

      # 11. Traffic test (Green) with rollback safety
      - name: 🌍 Traffic test (Green)
        id: green-test
        continue-on-error: true
        run: |
          echo "===== Testing Green traffic ====="
          for i in {1..5}; do
            kubectl run curl-green-$i --rm -i --restart=Never --image=curlimages/curl -n app -- \
              curl -s http://weather-app:8080 || exit 1
          done

      - name: 🔁 Rollback to Blue if Green fails
        if: steps.green-test.outcome == 'failure'
        run: |
          echo "❌ Green failed. Rolling back..."
          kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"blue"}}}'
          kubectl rollout status deployment/weather-blue -n app --timeout=60s
          exit 1

      # 12. Canary rollout simulation
      - name: 🟡 Canary rollout
        run: |
          echo "===== Starting Canary rollout ====="
          kubectl apply -n app -f k8s/canary-v2-10.yaml
          kubectl rollout status deployment/weather-canary -n app --timeout=60s
          kubectl get pods -n app -o wide

          echo "Scaling Canary to 50%..."
          kubectl patch deployment weather-canary -n app -p '{"spec":{"replicas":2}}'
          sleep 15
          kubectl get pods -n app -o wide

          echo "Scaling Canary to 100%..."
          kubectl patch deployment weather-canary -n app -p '{"spec":{"replicas":4}}'
          sleep 15
          kubectl get pods -n app -o wide
          echo "✅ Canary scaled to 100%"

      # 13. Traffic test (Canary) with rollback safety
      - name: 🌍 Traffic test (Canary)
        id: canary-test
        continue-on-error: true
        run: |
          echo "===== Testing Canary traffic ====="
          for i in {1..10}; do
            kubectl run curl-canary-$i --rm -i --restart=Never --image=curlimages/curl -n app -- \
              curl -s http://weather-app:8080 || exit 1
          done

      - name: 🔁 Rollback to Blue if Canary fails
        if: steps.canary-test.outcome == 'failure'
        run: |
          echo "❌ Canary failed. Rolling back..."
          kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"blue"}}}'
          kubectl rollout status deployment/weather-blue -n app --timeout=60s
          exit 1

      # 14. Explicit rollback at end
      - name: 🔙 Rollback to Blue (final reset)
        run: |
          echo "===== Resetting Service to Blue ====="
          kubectl patch service weather-app -n app -p '{"spec":{"selector":{"app":"weather-app","version":"blue"}}}'
          kubectl rollout status deployment/weather-blue -n app --timeout=60s
          echo "✅ Cluster reset to Blue"

      # 15. Final Cleanup
      - name: 🧹 Cleanup Kind Cluster
        if: always()
        run: |
          echo "===== Deleting Kind cluster ====="
          kind delete cluster --name weather-sim
          echo "✅ Cleanup complete"

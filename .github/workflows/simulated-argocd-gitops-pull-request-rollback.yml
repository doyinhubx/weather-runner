# .github/workflows/cicd-simulation.yaml
name: CI/CD Simulation with ArgoCD (GitOps PR Rollback)

on:
  push:
    branches: [main]

jobs:
  deploy-simulation:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig

    permissions:
      contents: write
      pull-requests: write

    steps:
      # 1. Checkout repository
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Configure Git
      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      # 3. Install tools
      - name: Install kubectl, kind, helm
        run: |
          curl -sLo kubectl "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl -sLo kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x kind && sudo mv kind /usr/local/bin/
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # 4. Docker login
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Build & Push images
      - name: Build & Push Images
        run: |
          docker build -t docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:good -f Dockerfile.good .
          docker push docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:good
          docker build -t docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:bad -f Dockerfile.bad .
          docker push docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:bad

      # 6. Create Kind cluster
      - name: Create Kind cluster
        run: kind create cluster --name argocd-cluster --kubeconfig $KUBECONFIG

      # 7. Install ArgoCD
      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-repo-server -n argocd

      # 8. Create target namespace
      - name: Create helms namespace
        run: kubectl create namespace helms || true

      # 9. Apply Application manifest
      - name: Apply Application manifest
        run: |
          kubectl apply -f - <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: weather-app
            namespace: argocd
          spec:
            project: default
            source:
              repoURL: https://github.com/${{ github.repository }}
              targetRevision: main
              path: weather-app-helms
              helm:
                valueFiles: ["values.yaml"]
            destination:
              server: https://kubernetes.default.svc
              namespace: helms
            syncPolicy:
              automated: {}
          EOF

            # 10. Update values.yaml and Create PR for good image
      - name: Update values.yaml for good image
        run: |
          sed -i "s|image: .*|image: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:good|" weather-app-helms/values.yaml

      - name: Deploy initial good image
        id: good_pr_initial
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_TOKEN }}
          commit-message: "Deploy initial good image"
          title: "Deploy initial good image"
          branch: "deploy-good-initial"
          base: main
          add-paths: |
            weather-app-helms/values.yaml
          body: "Automated PR for good image"
          labels: deploy

      # 11. Merge PR for good image (only if PR exists)
      - name: Merge initial good PR
        if: steps.good_pr_initial.outputs.pull-request-number != ''
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh pr merge ${{ steps.good_pr_initial.outputs.pull-request-number }} --squash --delete-branch

      # 13. Update values.yaml and Create PR for bad image
      - name: Update values.yaml for bad image
        run: |
          sed -i "s|image: .*|image: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:bad|" weather-app-helms/values.yaml

      - name: Deploy bad image
        id: bad_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_TOKEN }}
          commit-message: "Deploy bad image"
          title: "Deploy bad image"
          branch: "deploy-bad"
          base: main
          add-paths: |
            weather-app-helms/values.yaml
          body: "Automated PR for bad image"
          labels: deploy

      # 14. Merge PR for bad image (only if PR exists)
      - name: Merge bad PR
        if: steps.bad_pr.outputs.pull-request-number != ''
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh pr merge ${{ steps.bad_pr.outputs.pull-request-number }} --squash --delete-branch

      # 15. Wait for failure
      - name: Wait for bad image failure
        run: |
          echo "⏳ Waiting for bad image to fail..."
          kubectl wait --for=jsonpath='{.status.health.status}'=Degraded application/weather-app -n argocd --timeout=300s || true

      # 16. Rollback to previous good commit (exclude workflow files)
      - name: Rollback deployment
        run: |
          git fetch origin main
          git checkout main
          git pull --rebase origin main   # ensure latest state

          # Revert last commit but exclude workflow files
          git revert HEAD --no-edit --no-commit
          git restore --staged .github/workflows/
          git restore .github/workflows/
          git commit -m "Rollback deployment (excluding workflow changes)"
          git push origin main

          echo "✅ Rollback pushed. Waiting for ArgoCD to reconcile..."
          kubectl wait --for=jsonpath='{.status.health.status}'=Healthy application/weather-app -n argocd --timeout=300s



      # 17. Verify
      - name: Verify final deployment
        run: |
          FINAL_IMAGE=$(kubectl get deployment weather-app -n helms -o jsonpath="{.spec.template.spec.containers[0].image}")
          echo "Final deployed image: $FINAL_IMAGE"
          if [[ "$FINAL_IMAGE" == *":good" ]]; then
            echo "✅ SUCCESS: Rolled back to good image!"
          else
            echo "❌ FAILURE: Still bad!"
            exit 1
          fi

      # 18. Cleanup
      - name: Cleanup Kind cluster
        if: always()
        run: kind delete cluster --name argocd-cluster || true

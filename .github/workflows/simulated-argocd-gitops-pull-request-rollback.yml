# .github/workflows/cicd-simulation.yaml
name: CI/CD Simulation with ArgoCD (GitOps PR Rollback)

on:
  push:
    branches: [main]

jobs:
  deploy-simulation:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig

    steps:
      # 1. Checkout repository
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Configure Git
      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      # 3. Install tools
      - name: Install kubectl, kind, helm
        run: |
          curl -sLo kubectl "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl -sLo kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x kind && sudo mv kind /usr/local/bin/
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # 4. Docker login
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Build & Push images
      - name: Build & Push Images
        run: |
          docker build -t docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:good -f Dockerfile.good .
          docker push docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:good
          docker build -t docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:bad -f Dockerfile.bad .
          docker push docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:bad

      # 6. Create Kind cluster
      - name: Create Kind cluster
        run: kind create cluster --name argocd-cluster --kubeconfig $KUBECONFIG

      # 7. Install ArgoCD
      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-repo-server -n argocd

      # 8. Create target namespace
      - name: Create helms namespace
        run: kubectl create namespace helms || true

      # 9. Apply ArgoCD Application
      - name: Apply Application manifest
        run: |
          kubectl apply -f - <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: weather-app
            namespace: argocd
            annotations:
              argocd-image-updater.argoproj.io/image-list: weather-app=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app
              argocd-image-updater.argoproj.io/weather-app.update-strategy: latest
              argocd-image-updater.argoproj.io/write-back-method: git
          spec:
            project: default
            source:
              repoURL: https://github.com/${{ github.repository }}
              targetRevision: main
              path: weather-app-helms
              helm:
                valueFiles: ["values.yaml"]
            destination:
              server: https://kubernetes.default.svc
              namespace: helms
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=true
          EOF
          kubectl wait --for=jsonpath='{.status.health.status}'=Healthy application/weather-app -n argocd --timeout=300s

      # 10. Update values.yaml for a bad deployment and create PR
      - name: Deploy bad image
        id: bad_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Deploy bad image"
          title: "Deploy bad image"
          body: "Automated PR to deploy bad image for rollback test."
          branch: "deploy-bad"
          base: main
          paths: weather-app-helms/values.yaml
          add-paths: '["weather-app-helms/values.yaml"]'
          content: |
            image:
              repository: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app
              tag: "bad"
              pullPolicy: IfNotPresent
            service:
              type: ClusterIP
              port: 80
            replicaCount: 1

      # 11. Merge bad image PR automatically
      - name: Merge bad deployment PR
        uses: peter-evans/merge-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request: ${{ steps.bad_pr.outputs.pull-request-number }}
          merge-method: squash

      # 12. Check for bad image failure
      - name: Check for bad image failure and rollback
        run: |
          echo "⏳ Waiting for bad image deployment to fail..."
          # Wait for the application to be in a degraded state due to bad image
          kubectl wait --for=jsonpath='{.status.health.status}'=Degraded application/weather-app -n argocd --timeout=300s || true

          # Create a new commit to revert the changes
          git revert HEAD --no-edit --no-commit
          git commit -m "Rollback to good image after bad deployment failed"
          git push origin main
          
          echo "✅ Rollback triggered by reverting bad commit."
          echo "Waiting for ArgoCD to reconcile to the good image."
          kubectl wait --for=jsonpath='{.status.health.status}'=Healthy application/weather-app -n argocd --timeout=300s

      # 13. Verify final deployment
      - name: Verify final deployment
        run: |
          FINAL_IMAGE=$(kubectl get deployment weather-app -n helms -o jsonpath="{.spec.template.spec.containers[0].image}")
          echo "Final deployed image: $FINAL_IMAGE"
          if [[ "$FINAL_IMAGE" == *":good" ]]; then
            echo "✅ SUCCESS: ArgoCD reconciled back to good image!"
          else
            echo "❌ FAILURE: Deployment not healthy!"
            kubectl describe deployment weather-app -n helms
            exit 1
          fi
          
      # 14. Cleanup
      - name: Cleanup Kind cluster
        if: always()
        run: kind delete cluster --name argocd-cluster || true
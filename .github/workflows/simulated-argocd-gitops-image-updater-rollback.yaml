name: CI/CD Simulation with ArgoCD Image Updater

on:
  push:
    branches: [main]

jobs:
  deploy-simulation:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      # 2. Install tools
      - name: Install kubectl, kind, helm
        run: |
          curl -sLo kubectl https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl -sLo kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x kind && sudo mv kind /usr/local/bin/
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # 3. Create Kind cluster
      - name: Create Kind cluster
        run: kind create cluster --name argocd-cluster

      # 4. Install ArgoCD
      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl wait --for=condition=available --timeout=180s deployment/argocd-server -n argocd

      # 5. Install ArgoCD Image Updater
      - name: Install ArgoCD Image Updater
        run: |
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-image-updater/master/manifests/install.yaml
          kubectl wait --for=condition=available --timeout=180s deployment/argocd-image-updater -n argocd

      # 6. Create target namespace
      - name: Create helms namespace
        run: kubectl create namespace helms || true

      # 7. Apply ArgoCD Application
      - name: Apply Application manifest
        run: |
          kubectl apply -f - <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: weather-app
            namespace: argocd
            annotations:
              argocd-image-updater.argoproj.io/image-list: weather-app=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app
              argocd-image-updater.argoproj.io/weather-app.update-strategy: latest
              argocd-image-updater.argoproj.io/write-back-method: git
          spec:
            project: default
            source:
              repoURL: https://github.com/${{ github.repository }}
              targetRevision: main
              path: weather-app-helms
              helm:
                valueFiles: ["values.yaml"]
            destination:
              server: https://kubernetes.default.svc
              namespace: helms
            syncPolicy:
              automated: {}
          EOF

      # 8. Docker login
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 9. Build and push images
      - name: Build & Push Images
        run: |
          docker build -t docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:good -f Dockerfile.good .
          docker push docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:good
          docker build -t docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:bad -f Dockerfile.bad .
          docker push docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:bad

      # 10. Let ArgoCD Image Updater handle Good → Bad → Good
      - name: Trigger Image Updater & wait for reconciliation
        run: |
          for TAG in good bad good; do
            echo "➡️ Deploying image tag: $TAG"
            kubectl annotate application weather-app \
              argocd-image-updater.argoproj.io/force='true' \
              -n argocd --overwrite
            # Wait until ArgoCD has reconciled the deployment
            TIMEOUT=300
            INTERVAL=5
            ELAPSED=0
            while true; do
              CURRENT=$(kubectl get deployment weather-app -n helms -o jsonpath="{.spec.template.spec.containers[0].image}")
              if [[ "$CURRENT" == *":$TAG" ]]; then
                echo "✅ Image reconciled to $TAG"
                break
              fi
              if [[ $ELAPSED -ge $TIMEOUT ]]; then
                echo "❌ Timeout waiting for $TAG deployment"
                exit 1
              fi
              sleep $INTERVAL
              ELAPSED=$((ELAPSED + INTERVAL))
            done
          done

      # 11. Verify final image
      - name: Verify final deployment
        run: |
          FINAL_IMAGE=$(kubectl get deployment weather-app -n helms -o jsonpath="{.spec.template.spec.containers[0].image}")
          echo "Final deployed image: $FINAL_IMAGE"
          if [[ "$FINAL_IMAGE" == *":good" ]]; then
            echo "✅ ArgoCD Image Updater successfully reconciled back to good image!"
          else
            echo "❌ Reconciliation failed!"
            exit 1
          fi

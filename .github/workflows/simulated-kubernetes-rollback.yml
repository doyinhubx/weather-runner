name: Deploy and Test Rollback on Kind

on:
  push:
    branches: [main]

jobs:
  deploy-rollback:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Install kubectl, kind, and Helm
      - name: Install Kubernetes tools
        run: |
          echo "🔧 Installing kubectl, kind, and Helm..."
          curl -sLo kubectl https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl -sLo kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x kind && sudo mv kind /usr/local/bin/
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # 4. Create a temporary Kind cluster
      - name: Create Kind cluster
        run: |
          echo "🚀 Creating Kind cluster: test-cluster..."
          kind create cluster --name test-cluster
          echo "✅ Kind cluster created!"

      # 5. Build and load Docker images
      - name: Build and load working image
        run: |
          echo "📦 Building working image..."
          docker build -f Dockerfile.good -t weather-app:good .
          echo "📥 Loading working image into Kind..."
          kind load docker-image weather-app:good --name test-cluster
          echo "✅ Working image ready!"

      - name: Build and load failing image
        run: |
          echo "📦 Building failing image..."
          docker build -f Dockerfile.bad -t weather-app:bad .
          echo "📥 Loading failing image into Kind..."
          kind load docker-image weather-app:bad --name test-cluster
          echo "✅ Failing image loaded (for simulation)."

      # 6. Deploy working image
      - name: Deploy working image
        run: |
          echo "🚀 Deploying working release..."
          helm upgrade --install weather-app ./weather-app-helms \
            --namespace default \
            --set image.repository=weather-app \
            --set image.tag=good \
            --wait --timeout 3m
          echo "✅ Working release deployed successfully."

      # 7. Verify and print status of first (good) deployment
      - name: Verify working deployment
        run: |
          echo "🔍 Verifying working pod status..."
          kubectl rollout status deployment/weather-app --timeout=120s
          echo "📜 Rollout history after good deployment:"
          kubectl rollout history deployment/weather-app
          echo "📊 Current pods:"
          kubectl get pods -l app=weather-app -o wide
          echo "---------------------------------------------"

      # 8. Deploy failing image to simulate failure
      - name: Deploy failing image
        run: |
          echo "🚨 Deploying failing release..."
          helm upgrade --install weather-app ./weather-app-helms \
            --namespace default \
            --set image.repository=weather-app \
            --set image.tag=bad \
            --wait --timeout 3m || echo "⚠️ Deployment failed as expected"

      # 9. Post-deployment health check and rollback
      - name: Verify Deployment Health and Rollback if Failed
        run: |
          echo "🔍 Running post-deployment health checks..."
          FAILED=1
          for i in {1..12}; do
            STATUS=$(kubectl get pods -l app=weather-app -o jsonpath="{.items[0].status.phase}" 2>/dev/null || echo "NotReady")
            echo "📊 Current pod status: $STATUS"
            if [[ "$STATUS" == "Running" ]]; then
              echo "✅ Pod is running (deployment succeeded)."
              FAILED=0
              break
            fi
            echo "⏳ Waiting for pod to be ready... ($i/12)"
            sleep 10
          done

          if [[ $FAILED -eq 1 ]]; then
            echo "❌ Deployment failed health check!"
            echo "📊 Pods before rollback:"
            kubectl get pods -l app=weather-app -o wide || true
            echo "---------------------------------------------"

            echo "🔄 Triggering rollback..."
            kubectl rollout undo deployment/weather-app || echo "⚠️ No rollback needed"
            
            echo "📜 Rollout history after rollback:"
            kubectl rollout history deployment/weather-app

            echo "📊 Pods after rollback:"
            kubectl get pods -l app=weather-app -o wide
            echo "---------------------------------------------"
          fi

      # 10. Deploy third good image to confirm recovery
      - name: Deploy third good release
        run: |
          echo "🚀 Deploying third good release to confirm recovery..."
          docker build -f Dockerfile.good -t weather-app:good-v2 .
          kind load docker-image weather-app:good-v2 --name test-cluster
          helm upgrade --install weather-app ./weather-app-helms \
            --namespace default \
            --set image.repository=weather-app \
            --set image.tag=good-v2 \
            --wait --timeout 3m
          echo "✅ Third good release deployed successfully."

          echo "📜 Rollout history after third release:"
          kubectl rollout history deployment/weather-app

          echo "📊 Current pods after recovery:"
          kubectl get pods -l app=weather-app -o wide
          echo "---------------------------------------------"

      # 11. Cleanup cluster
      - name: Cleanup Kind Cluster
        if: always()
        run: |
          echo "🧹 Cleaning up Kind cluster..."
          kind delete cluster --name test-cluster
          echo "✅ Kind cluster deleted."

name: Deploy and Test Rollback on Kind

on:
  push:
    branches: [main]

jobs:
  deploy-rollback:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Install kubectl, kind, and Helm
      - name: Install Kubernetes tools
        run: |
          curl -sLo kubectl https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl -sLo kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x kind && sudo mv kind /usr/local/bin/
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # 4. Create a temporary Kind cluster
      - name: Create Kind cluster
        run: |
          kind create cluster --name test-cluster

      # 5. Load Docker images into Kind
      - name: Build and load working image
        run: |
          docker build -f Dockerfile.working -t weather-app:working .
          kind load docker-image weather-app:working --name test-cluster

      - name: Build and load failing image
        run: |
          docker build -f Dockerfile.failing -t weather-app:failing .
          kind load docker-image weather-app:failing --name test-cluster

      # 6. Deploy working image via Helm
      - name: Deploy working image
        run: |
          helm upgrade --install weather-app ./weather-app-helms \
            --namespace default \
            --set image.repository=weather-app \
            --set image.tag=working \
            --wait --timeout 3m

      # 7. Verify deployment succeeded
      - name: Verify deployment
        run: |
          echo "Checking pod health..."
          for i in {1..12}; do
            STATUS=$(kubectl get pods -l app=weather-app -o jsonpath="{.items[0].status.phase}")
            if [[ "$STATUS" == "Running" ]]; then
              echo "Pod is running"
              exit 0
            fi
            echo "Waiting for pod..."
            sleep 10
          done
          echo "Initial deployment failed!"
          exit 1

      # 8. Deploy failing image to simulate failure
      - name: Deploy failing image
        run: |
          helm upgrade --install weather-app ./weather-app-helms \
            --namespace default \
            --set image.repository=weather-app \
            --set image.tag=failing \
            --wait --timeout 3m || echo "Deployment failed as expected"

      # 9. Post-Deployment Health Check & Automated Rollback
      - name: Verify Deployment Health and Rollback if Failed
        run: |
          echo "Checking pod health..."
          FAILED=1
          for i in {1..12}; do
            STATUS=$(kubectl get pods -l app=weather-app -o jsonpath="{.items[0].status.phase}" 2>/dev/null || echo "NotReady")
            echo "Current pod status: $STATUS"
            if [[ "$STATUS" == "Running" ]]; then
              echo "Pod is running"
              FAILED=0
              break
            fi
            echo "Waiting for pod to be ready... ($i/12)"
            sleep 10
          done

          if [[ $FAILED -eq 1 ]]; then
            echo "Deployment failed health check! Rolling back..."
            kubectl rollout undo deployment/weather-app || echo "No rollback needed (maybe first deploy)"
            exit 1
          fi

      # 10. Final check after rollback
      - name: Verify rollback
        run: |
          STATUS=$(kubectl get pods -l app=weather-app -o jsonpath="{.items[0].status.phase}")
          if [[ "$STATUS" == "Running" ]]; then
            echo "Rollback successful, pod is running"
          else
            echo "Rollback failed!"
            exit 1
